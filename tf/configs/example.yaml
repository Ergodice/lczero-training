%YAML 1.2
---
name: 'example'
gpu: 0
dataset:
  num_chunks: 6_000_000
  allow_less_chunks: false
  train_ratio: 0.95
  sort_type: name
  input: '/home/admin/daniel/leeladata/train/*/'
  experimental_v5_only_dataset: false
  train_workers: 4
  test_workers: 2
training:
    precision: single 
    swa: true
    swa_output: true    
    swa_max_n: 10
    swa_steps: 100
    max_grad_norm: 1.0
    batch_size: 1024
    num_batch_splits: 2
    q_ratio: 0
    value_focus_min: 1.0
    value_focus_slope: 0.0
    lookahead_optimizer: false
    renorm: true
    renorm_max_r: 1.0
    renorm_max_d: 0.0
    test_steps: 2500
    # validation_steps: 5000
    num_test_positions: 131_072
    train_avg_report_steps: 2500
    total_steps: 2_000_000
    checkpoint_steps: 500_000 
    shuffle_size: 100_000
    warmup_steps: 4000
    mask_legal_moves: true
    lr_values: # schedule is likely outdated
        - 0.2
        - 0.16
        - 0.128
        - 0.1024
        - 0.08192  # 500k
        - 0.06554
        - 0.05243
        - 0.04194
        - 0.03355
        - 0.02684  # 1M
        - 0.02147
        - 0.01718
        - 0.01374
        - 0.01100
        - 0.00880  # 1.5M
        - 0.00704
        - 0.00563
        - 0.00450
        - 0.00360
        - 0.00288  # 2M
    lr_boundaries:
        - 100_000 
        - 200_000
        - 300_000
        - 400_000
        - 500_000
        - 600_000
        - 700_000
        - 800_000
        - 900_000
        - 1_000_000
        - 1_100_000
        - 1_200_000
        - 1_300_000
        - 1_400_000
        - 1_500_000
        - 1_600_000
        - 1_700_000
        - 1_800_000
        - 1_900_000
    policy_loss_weight: 1.0
    value_loss_weight: 1.0
    reg_term_weight: 1.0
    moves_left_loss_weight: 1.0
    path: 'networks'
model:              
    embedding_size: 512
    policy_embedding_size: 512
    value_embedding_size: 32
    moves_left_embedding_size: 8
    encoder_layers: 10                   # number of intermediate attention layers in the policy head
    encoder_heads: 8                     # number of attention heads in encoder layers, emb // (32 or 64) recommended
                                         # with 64 memory is same as embedding, with 32 is double
    encoder_d_model: 512                 # size of the Q, K, & V vectors in encoder layers -- divisible by encoder_heads
    encoder_dff: 768                    # size of the expansion layer in encoder layer ffn
    policy_d_model: 512                  # size of the query and key vectors in final attention layer
    dropout_rate: 0.0                    # the dropout rate used for weight regularization of attention during training
                                        # makes memory 33 -> 39 GB on A100 as observed by Teck and Kovax
    value: 'wdl'
    moves_left: 'v1'
    input_type: 'classic'

    # apparently adds nothing with fullgen, but tests needed
    arc_encoding: false

    # fullgen is extremely strong, adds 1.2% pol acc to 10x 16h/256/1024dff model
    use_fullgen: true
    fullgen_hidden_channels: 32
    fullgen_hidden_sz: 256
    fullgen_big_hidden_sz: 256
    fullgen_out_maps: 4
    fullgen_history: 1 # 1 always recommended
    fullgen_activation: 'swish' # adds 0.1% pol acc over relu 5x 8h/256/1024dff

    # necessary with fullgen, no tests without it yet but certainly very strong
    talking_heads: true

    # DCD with spec 's' is viable, adds 0.5% pol acc to a 5x 8h/256/1024dff
    dcd_spec: ''
    dcd_size: 32 # paper says sqrt(filters), 32 improves 0.2% pol acc against 16 on a 5x 8h/256/1024dff

    # based on dyconv paper, not recommended since
    # dcd likely better especially with memory ~ embedding_sz^2
    dydense_temp_start: 30 # starting temperature for dydense
    dydense_temp_anneal_steps: 200_000 # 200k works well, but maybe switch to exponential decay
    dydense_usage: '' # 'qkvo12' for query, key, value, out, dff1, dff2; must be string
    dydense_kernels: 2 # Number of dydense kernels, params is times this number
    dydense_pc: false # channelwise: true or false

    # two other dynamic techniques
    dytalking_heads: false # no improvement observed, authors saw improvement
                           # on pretraining task but not downstream tasks

    # was useful but adds nothing with fullgen (maybe because fullgen has bias?)
    logit_gate: 0 # 1 or 2 for +add/+mult gate for logit/attention, 0 for no gates